{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.isAuthenticated = false;\n  }\n  login() {\n    // Implement your authentication logic here.\n    // If authentication is successful, set this.isAuthenticated to true.\n    this.isAuthenticated = true;\n  }\n  logout() {\n    // Implement your logout logic here.\n    this.isAuthenticated = false;\n  }\n  isAdminAuthenticated() {\n    return this.isAuthenticated;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","isAuthenticated","login","logout","isAdminAuthenticated","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/b/2023/Code-Test/src/services/AuthService.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private isAuthenticated: boolean = false;\n\n  constructor() {}\n\n  login() {\n    // Implement your authentication logic here.\n    // If authentication is successful, set this.isAuthenticated to true.\n    this.isAuthenticated = true;\n  }\n\n  logout() {\n    // Implement your logout logic here.\n    this.isAuthenticated = false;\n  }\n\n  isAdminAuthenticated(): boolean {\n    return this.isAuthenticated;\n  }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,WAAW;EAGtBC,YAAA;IAFQ,KAAAC,eAAe,GAAY,KAAK;EAEzB;EAEfC,KAAKA,CAAA;IACH;IACA;IACA,IAAI,CAACD,eAAe,GAAG,IAAI;EAC7B;EAEAE,MAAMA,CAAA;IACJ;IACA,IAAI,CAACF,eAAe,GAAG,KAAK;EAC9B;EAEAG,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACH,eAAe;EAC7B;EAAC,QAAAI,CAAA,G;qBAlBUN,WAAW;EAAA;EAAA,QAAAO,EAAA,G;WAAXP,WAAW;IAAAQ,OAAA,EAAXR,WAAW,CAAAS,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./AuthService.service\";\nexport class AuthGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  canActivate() {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/admin-login']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthGuard","constructor","router","authService","canActivate","isAuthenticated","navigate","_","i0","ɵɵinject","i1","Router","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\BNI\\2023\\learn\\deptech\\src\\services\\AuthGuard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { AuthService } from './AuthService.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private router: Router, private authService: AuthService) {}\r\n\r\n  canActivate(): boolean {\r\n    if (this.authService.isAuthenticated()) {\r\n      return true;\r\n    } else {\r\n      this.router.navigate(['/admin-login']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,MAAc,EAAUC,WAAwB;IAAhD,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,WAAW,GAAXA,WAAW;EAAgB;EAEvEC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACD,WAAW,CAACE,eAAe,EAAE,EAAE;MACtC,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;MACtC,OAAO,KAAK;;EAEhB;EAAC,QAAAC,CAAA,G;qBAVUP,SAAS,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATd,SAAS;IAAAe,OAAA,EAATf,SAAS,CAAAgB,IAAA;IAAAC,UAAA,EAFR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
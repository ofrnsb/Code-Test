{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AdminLoginComponent = class AdminLoginComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.username = '';\n    this.password = '';\n  }\n  onSubmit() {\n    // Check if the provided username and password match any of your data\n    const user = this.authService.authenticateUser(this.username, this.password);\n    if (user) {\n      // User is authenticated, perform login actions (e.g., navigate to a dashboard)\n      console.log('User authenticated');\n    } else {\n      // Authentication failed, show an error message or handle it as needed\n      console.log('Authentication failed');\n    }\n  }\n};\nAdminLoginComponent = __decorate([Component({\n  selector: 'app-admin-login',\n  templateUrl: './admin-login.component.html',\n  styleUrls: ['./admin-login.component.css']\n})], AdminLoginComponent);","map":{"version":3,"names":["Component","AdminLoginComponent","constructor","authService","username","password","onSubmit","user","authenticateUser","console","log","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\BNI\\2023\\learn\\deptech\\src\\app\\admin-login\\admin-login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n// Assuming you have a service to handle user authentication\nimport { AuthService } from './auth.service'; // Import and inject your auth service\n\n@Component({\n  selector: 'app-admin-login',\n  templateUrl: './admin-login.component.html',\n  styleUrls: ['./admin-login.component.css'],\n})\nexport class AdminLoginComponent {\n  username: string = '';\n  password: string = '';\n\n  constructor(private authService: AuthService) {}\n\n  onSubmit() {\n    // Check if the provided username and password match any of your data\n    const user = this.authService.authenticateUser(\n      this.username,\n      this.password\n    );\n\n    if (user) {\n      // User is authenticated, perform login actions (e.g., navigate to a dashboard)\n      console.log('User authenticated');\n    } else {\n      // Authentication failed, show an error message or handle it as needed\n      console.log('Authentication failed');\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAI9BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAH/B,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,QAAQ,GAAW,EAAE;EAE0B;EAE/CC,QAAQA,CAAA;IACN;IACA,MAAMC,IAAI,GAAG,IAAI,CAACJ,WAAW,CAACK,gBAAgB,CAC5C,IAAI,CAACJ,QAAQ,EACb,IAAI,CAACC,QAAQ,CACd;IAED,IAAIE,IAAI,EAAE;MACR;MACAE,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;KAClC,MAAM;MACL;MACAD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;EAExC;CACD;AArBYT,mBAAmB,GAAAU,UAAA,EAL/BX,SAAS,CAAC;EACTY,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWb,mBAAmB,CAqB/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
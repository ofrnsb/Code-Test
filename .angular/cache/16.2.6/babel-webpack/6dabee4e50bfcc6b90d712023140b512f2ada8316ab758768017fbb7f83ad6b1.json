{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"getNextPathnameInfo\", {\n  enumerable: true,\n  get: function () {\n    return getNextPathnameInfo;\n  }\n});\nconst _normalizelocalepath = require(\"../../i18n/normalize-locale-path\");\nconst _removepathprefix = require(\"./remove-path-prefix\");\nconst _pathhasprefix = require(\"./path-has-prefix\");\nfunction getNextPathnameInfo(pathname, options) {\n  var _options_nextConfig;\n  const {\n    basePath,\n    i18n,\n    trailingSlash\n  } = (_options_nextConfig = options.nextConfig) != null ? _options_nextConfig : {};\n  const info = {\n    pathname,\n    trailingSlash: pathname !== \"/\" ? pathname.endsWith(\"/\") : trailingSlash\n  };\n  if (basePath && (0, _pathhasprefix.pathHasPrefix)(info.pathname, basePath)) {\n    info.pathname = (0, _removepathprefix.removePathPrefix)(info.pathname, basePath);\n    info.basePath = basePath;\n  }\n  let pathnameNoDataPrefix = info.pathname;\n  if (info.pathname.startsWith(\"/_next/data/\") && info.pathname.endsWith(\".json\")) {\n    const paths = info.pathname.replace(/^\\/_next\\/data\\//, \"\").replace(/\\.json$/, \"\").split(\"/\");\n    const buildId = paths[0];\n    info.buildId = buildId;\n    pathnameNoDataPrefix = paths[1] !== \"index\" ? \"/\" + paths.slice(1).join(\"/\") : \"/\";\n    // update pathname with normalized if enabled although\n    // we use normalized to populate locale info still\n    if (options.parseData === true) {\n      info.pathname = pathnameNoDataPrefix;\n    }\n  }\n  // If provided, use the locale route normalizer to detect the locale instead\n  // of the function below.\n  if (i18n) {\n    let result = options.i18nProvider ? options.i18nProvider.analyze(info.pathname) : (0, _normalizelocalepath.normalizeLocalePath)(info.pathname, i18n.locales);\n    info.locale = result.detectedLocale;\n    var _result_pathname;\n    info.pathname = (_result_pathname = result.pathname) != null ? _result_pathname : info.pathname;\n    if (!result.detectedLocale && info.buildId) {\n      result = options.i18nProvider ? options.i18nProvider.analyze(pathnameNoDataPrefix) : (0, _normalizelocalepath.normalizeLocalePath)(pathnameNoDataPrefix, i18n.locales);\n      if (result.detectedLocale) {\n        info.locale = result.detectedLocale;\n      }\n    }\n  }\n  return info;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","getNextPathnameInfo","_normalizelocalepath","require","_removepathprefix","_pathhasprefix","pathname","options","_options_nextConfig","basePath","i18n","trailingSlash","nextConfig","info","endsWith","pathHasPrefix","removePathPrefix","pathnameNoDataPrefix","startsWith","paths","replace","split","buildId","slice","join","parseData","result","i18nProvider","analyze","normalizeLocalePath","locales","locale","detectedLocale","_result_pathname"],"sources":["C:/Users/BNI/node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getNextPathnameInfo\", {\n    enumerable: true,\n    get: function() {\n        return getNextPathnameInfo;\n    }\n});\nconst _normalizelocalepath = require(\"../../i18n/normalize-locale-path\");\nconst _removepathprefix = require(\"./remove-path-prefix\");\nconst _pathhasprefix = require(\"./path-has-prefix\");\nfunction getNextPathnameInfo(pathname, options) {\n    var _options_nextConfig;\n    const { basePath, i18n, trailingSlash } = (_options_nextConfig = options.nextConfig) != null ? _options_nextConfig : {};\n    const info = {\n        pathname,\n        trailingSlash: pathname !== \"/\" ? pathname.endsWith(\"/\") : trailingSlash\n    };\n    if (basePath && (0, _pathhasprefix.pathHasPrefix)(info.pathname, basePath)) {\n        info.pathname = (0, _removepathprefix.removePathPrefix)(info.pathname, basePath);\n        info.basePath = basePath;\n    }\n    let pathnameNoDataPrefix = info.pathname;\n    if (info.pathname.startsWith(\"/_next/data/\") && info.pathname.endsWith(\".json\")) {\n        const paths = info.pathname.replace(/^\\/_next\\/data\\//, \"\").replace(/\\.json$/, \"\").split(\"/\");\n        const buildId = paths[0];\n        info.buildId = buildId;\n        pathnameNoDataPrefix = paths[1] !== \"index\" ? \"/\" + paths.slice(1).join(\"/\") : \"/\";\n        // update pathname with normalized if enabled although\n        // we use normalized to populate locale info still\n        if (options.parseData === true) {\n            info.pathname = pathnameNoDataPrefix;\n        }\n    }\n    // If provided, use the locale route normalizer to detect the locale instead\n    // of the function below.\n    if (i18n) {\n        let result = options.i18nProvider ? options.i18nProvider.analyze(info.pathname) : (0, _normalizelocalepath.normalizeLocalePath)(info.pathname, i18n.locales);\n        info.locale = result.detectedLocale;\n        var _result_pathname;\n        info.pathname = (_result_pathname = result.pathname) != null ? _result_pathname : info.pathname;\n        if (!result.detectedLocale && info.buildId) {\n            result = options.i18nProvider ? options.i18nProvider.analyze(pathnameNoDataPrefix) : (0, _normalizelocalepath.normalizeLocalePath)(pathnameNoDataPrefix, i18n.locales);\n            if (result.detectedLocale) {\n                info.locale = result.detectedLocale;\n            }\n        }\n    }\n    return info;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.isAuthenticated = false;\n  }\n  login() {\n    // Implement your authentication logic here.\n    // If authentication is successful, set this.isAuthenticated to true.\n    this.isAuthenticated = true;\n  }\n  logout() {\n    // Implement your logout logic here.\n    this.isAuthenticated = false;\n  }\n  isAuthenticated() {\n    return this.isAuthenticated;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","isAuthenticated","login","logout","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\BNI\\2023\\learn\\deptech\\src\\services\\AuthService.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated: boolean = false;\r\n\r\n  constructor() {}\r\n\r\n  login() {\r\n    // Implement your authentication logic here.\r\n    // If authentication is successful, set this.isAuthenticated to true.\r\n    this.isAuthenticated = true;\r\n  }\r\n\r\n  logout() {\r\n    // Implement your logout logic here.\r\n    this.isAuthenticated = false;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n}\r\n"],"mappings":";AAKA,OAAM,MAAOA,WAAW;EAGtBC,YAAA;IAFQ,KAAAC,eAAe,GAAY,KAAK;EAEzB;EAEfC,KAAKA,CAAA;IACH;IACA;IACA,IAAI,CAACD,eAAe,GAAG,IAAI;EAC7B;EAEAE,MAAMA,CAAA;IACJ;IACA,IAAI,CAACF,eAAe,GAAG,KAAK;EAC9B;EAEAA,eAAeA,CAAA;IACb,OAAO,IAAI,CAACA,eAAe;EAC7B;EAAC,QAAAG,CAAA,G;qBAlBUL,WAAW;EAAA;EAAA,QAAAM,EAAA,G;WAAXN,WAAW;IAAAO,OAAA,EAAXP,WAAW,CAAAQ,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
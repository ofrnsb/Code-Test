{"ast":null,"code":"/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"parsePath\", {\n  enumerable: true,\n  get: function () {\n    return parsePath;\n  }\n});\nfunction parsePath(path) {\n  const hashIndex = path.indexOf(\"#\");\n  const queryIndex = path.indexOf(\"?\");\n  const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n  if (hasQuery || hashIndex > -1) {\n    return {\n      pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n      query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : \"\",\n      hash: hashIndex > -1 ? path.slice(hashIndex) : \"\"\n    };\n  }\n  return {\n    pathname: path,\n    query: \"\",\n    hash: \"\"\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","parsePath","path","hashIndex","indexOf","queryIndex","hasQuery","pathname","substring","query","undefined","hash","slice"],"sources":["C:/Users/BNI/node_modules/next/dist/shared/lib/router/utils/parse-path.js"],"sourcesContent":["/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"parsePath\", {\n    enumerable: true,\n    get: function() {\n        return parsePath;\n    }\n});\nfunction parsePath(path) {\n    const hashIndex = path.indexOf(\"#\");\n    const queryIndex = path.indexOf(\"?\");\n    const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n    if (hasQuery || hashIndex > -1) {\n        return {\n            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : \"\",\n            hash: hashIndex > -1 ? path.slice(hashIndex) : \"\"\n        };\n    }\n    return {\n        pathname: path,\n        query: \"\",\n        hash: \"\"\n    };\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GAAI,YAAY;;AAChBA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,WAAW,EAAE;EACxCE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAOC,SAAS;EACpB;AACJ,CAAC,CAAC;AACF,SAASA,SAASA,CAACC,IAAI,EAAE;EACrB,MAAMC,SAAS,GAAGD,IAAI,CAACE,OAAO,CAAC,GAAG,CAAC;EACnC,MAAMC,UAAU,GAAGH,IAAI,CAACE,OAAO,CAAC,GAAG,CAAC;EACpC,MAAME,QAAQ,GAAGD,UAAU,GAAG,CAAC,CAAC,KAAKF,SAAS,GAAG,CAAC,IAAIE,UAAU,GAAGF,SAAS,CAAC;EAC7E,IAAIG,QAAQ,IAAIH,SAAS,GAAG,CAAC,CAAC,EAAE;IAC5B,OAAO;MACHI,QAAQ,EAAEL,IAAI,CAACM,SAAS,CAAC,CAAC,EAAEF,QAAQ,GAAGD,UAAU,GAAGF,SAAS,CAAC;MAC9DM,KAAK,EAAEH,QAAQ,GAAGJ,IAAI,CAACM,SAAS,CAACH,UAAU,EAAEF,SAAS,GAAG,CAAC,CAAC,GAAGA,SAAS,GAAGO,SAAS,CAAC,GAAG,EAAE;MACzFC,IAAI,EAAER,SAAS,GAAG,CAAC,CAAC,GAAGD,IAAI,CAACU,KAAK,CAACT,SAAS,CAAC,GAAG;IACnD,CAAC;EACL;EACA,OAAO;IACHI,QAAQ,EAAEL,IAAI;IACdO,KAAK,EAAE,EAAE;IACTE,IAAI,EAAE;EACV,CAAC;AACL"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"removePathPrefix\", {\n  enumerable: true,\n  get: function () {\n    return removePathPrefix;\n  }\n});\nconst _pathhasprefix = require(\"./path-has-prefix\");\nfunction removePathPrefix(path, prefix) {\n  // If the path doesn't start with the prefix we can return it as is. This\n  // protects us from situations where the prefix is a substring of the path\n  // prefix such as:\n  //\n  // For prefix: /blog\n  //\n  //   /blog -> true\n  //   /blog/ -> true\n  //   /blog/1 -> true\n  //   /blogging -> false\n  //   /blogging/ -> false\n  //   /blogging/1 -> false\n  if (!(0, _pathhasprefix.pathHasPrefix)(path, prefix)) {\n    return path;\n  }\n  // Remove the prefix from the path via slicing.\n  const withoutPrefix = path.slice(prefix.length);\n  // If the path without the prefix starts with a `/` we can return it as is.\n  if (withoutPrefix.startsWith(\"/\")) {\n    return withoutPrefix;\n  }\n  // If the path without the prefix doesn't start with a `/` we need to add it\n  // back to the path to make sure it's a valid path.\n  return \"/\" + withoutPrefix;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","removePathPrefix","_pathhasprefix","require","path","prefix","pathHasPrefix","withoutPrefix","slice","length","startsWith"],"sources":["C:/Users/BNI/node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"removePathPrefix\", {\n    enumerable: true,\n    get: function() {\n        return removePathPrefix;\n    }\n});\nconst _pathhasprefix = require(\"./path-has-prefix\");\nfunction removePathPrefix(path, prefix) {\n    // If the path doesn't start with the prefix we can return it as is. This\n    // protects us from situations where the prefix is a substring of the path\n    // prefix such as:\n    //\n    // For prefix: /blog\n    //\n    //   /blog -> true\n    //   /blog/ -> true\n    //   /blog/1 -> true\n    //   /blogging -> false\n    //   /blogging/ -> false\n    //   /blogging/1 -> false\n    if (!(0, _pathhasprefix.pathHasPrefix)(path, prefix)) {\n        return path;\n    }\n    // Remove the prefix from the path via slicing.\n    const withoutPrefix = path.slice(prefix.length);\n    // If the path without the prefix starts with a `/` we can return it as is.\n    if (withoutPrefix.startsWith(\"/\")) {\n        return withoutPrefix;\n    }\n    // If the path without the prefix doesn't start with a `/` we need to add it\n    // back to the path to make sure it's a valid path.\n    return \"/\" + withoutPrefix;\n}\n\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,kBAAkB,EAAE;EAC/CE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAOC,gBAAgB;EAC3B;AACJ,CAAC,CAAC;AACF,MAAMC,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,SAASF,gBAAgBA,CAACG,IAAI,EAAEC,MAAM,EAAE;EACpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAI,CAAC,CAAC,CAAC,EAAEH,cAAc,CAACI,aAAa,EAAEF,IAAI,EAAEC,MAAM,CAAC,EAAE;IAClD,OAAOD,IAAI;EACf;EACA;EACA,MAAMG,aAAa,GAAGH,IAAI,CAACI,KAAK,CAACH,MAAM,CAACI,MAAM,CAAC;EAC/C;EACA,IAAIF,aAAa,CAACG,UAAU,CAAC,GAAG,CAAC,EAAE;IAC/B,OAAOH,aAAa;EACxB;EACA;EACA;EACA,OAAO,GAAG,GAAGA,aAAa;AAC9B"},"metadata":{},"sourceType":"script","externalDependencies":[]}